@using Microsoft.AspNetCore.Http;
@using Newtonsoft.Json;
@using Services;
@inherits PromptBaseComponent

<MudStack Row="true">
    <MudIconButton Icon="@Icons.Material.Filled.Upload" Variant="Variant.Outlined" OnClick="OpenFileDialog" Color="Color.Default" Style="width:60px;height:72px;margin-top:20px" />
    <InputFile OnChange="HandleFileSelected" hidden />
    <MudPaper Height="92px" Outlined="true" Class="@DragClass" Style="padding:29px">
        <MudText id="mudText" Typo="Typo.h6" Style="@isDsiplayMudText">Copy and Paste files here! or click on upload </MudText>
        <img id="imgData" Src="@fileData" style="@isDsiplayImage" />
    </MudPaper>

    <MudButton id="btnSentText" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Default"
               Size="Size.Small" title="text" Style="width:60px;height:72px;margin-top:20px;padding-right:40px;padding-left:40px" OnClick="SendPrompt"> Send</MudButton>
</MudStack>

@code {
    public string TextValue = "test";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        //Register JavaScript interop for paste event
        await JS.InvokeVoidAsync("registerPasteEvent", DotNetObjectReference.Create(this));
    }

    string fileData = "";
    string isDsiplayMudText = "display:block";
    string isDsiplayImage = "display:none";
    private async Task SendPrompt()
    {
        // if (string.IsNullOrEmpty(fileData))
        // {
        //     return;
        // }
        var base64String = await JS.InvokeAsync<string>("getFileData");
        var dataUrl = base64String;
        if (base64String.StartsWith("data:"))
        {
            base64String = base64String.Split(",")[1];
        }

        var userPromptImageTag = "<img src=" + dataUrl + "></img>";
        string messageId = Guid.NewGuid().ToString();
        await JS.InvokeVoidAsync("UserQueryContent", userPromptImageTag, messageId);

        string authTokenStr = await JS.InvokeAsync<string>("connectToAiApp.getCookieValue", "AuthToken");
        if (!string.IsNullOrWhiteSpace(authTokenStr))
        {
            UserDetail = JsonConvert.DeserializeObject<UserDetail>(authTokenStr);
        }

        ClientPromptInput.InputType = "image";
        ClientPromptInput.Prompt = base64String; // this is a prompt
        ClientPromptInput.UserId = UserDetail.UserID;
        AppUserSettingService appUserSettingService = new AppUserSettingService(appSettings);
        var appUserSetting = await appUserSettingService.GetAppSettingByAppUserIdAsync(UserDetail.UserID);

        var responseContent = await UpdateUiWithOutStream(await ProcessPrompt(appSettings, ClientPromptInput), userPromptImageTag);
        await JS.InvokeVoidAsync("AppendResponseContent", UserDetail.UserID, responseContent, messageId, true);

        var userSetting = JsonConvert.DeserializeObject<UserSetting>(appUserSetting.AllSettingsInJSON);

        if (userSetting != null && Convert.ToBoolean(userSetting.IsSpeakerEnabled))
        {
            await JS.InvokeVoidAsync("aiSpeech.getSpeechFromAzure", responseContent);
        }
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            byte[] imageBytes = memoryStream.ToArray();
            fileData = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
            isDsiplayMudText = "display:none";
            isDsiplayImage = "display:block;height:50px;margin-top:-14px;";
            Console.WriteLine($"File Name: {file.Name}, Size: {file.Size} bytes");
        }
    }

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    private async Task Clear()
    {
        ClearDragClass();
        await Task.Delay(100);
    }


    private async void OpenFileDialog()
    {
        await JS.InvokeVoidAsync("openFileDialog");
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Handle the selected file(s)
        foreach (var file in e.GetMultipleFiles())
        {
            // Process each file as needed
            using (var stream = file.OpenReadStream())
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();
                var base64String = Convert.ToBase64String(fileBytes);

                fileData = "data:" + file.ContentType + ";" + "base64," + base64String;
                isDsiplayMudText = "display:none";
                isDsiplayImage = "display:block;height:50px;margin-top:-14px;";
                // Use the base64String as needed
                Console.WriteLine($"Selected file: {file.Name}");
                Console.WriteLine($"File Data URL: data:{file.ContentType};base64,{base64String}");
            }
        }
    }
    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }
    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

}
