@page "/private/Index"
@inherits PromptBaseComponent
@using Newtonsoft.Json;
@using System.Text;
@inject IJSRuntime JS
@implements IAsyncDisposable
<style>
    body {
        margin: 0;
        padding: 0;
        overflow-x: hidden;
    }

    #main-chat-container {
        overflow-y: auto;
        height: calc(100vh - 50px); /* Adjust the height based on your footer height */
    }

    #footer {
        position: fixed;
        bottom: 0;
        width: 88%;
        background-color: #333;
    }
</style>
<MudPaper>
    <MudPaper id="chatContainer" Style="@OtherTab">
        <PartialChatPageComponent />
    </MudPaper>
    <MudPaper id="settingContainer" Style="@SettingTab">
        <PartialSettingPageComponent />
    </MudPaper>
    <MudTabs Outlined="true" Position="Position.Bottom" Rounded="true" Border="true"
             ApplyEffectsToContainer="true" PanelClass="pa-4" Color="Color.Default" @bind-ActivePanelIndex="activeIndex" id="footer">
        <MudTabPanel Text="IMAGE" OnClick="SetOtherTabHeight">
            <PartialImageComponent />
        </MudTabPanel>
        <MudTabPanel Text="QUERY" OnClick="SetOtherTabHeight">
            <PartialAudioComponent />
        </MudTabPanel>
        <MudTabPanel Text="TEXT" OnClick="SetOtherTabHeight" Style="display:none">
            <PartialTextComponent />
        </MudTabPanel>
        <MudTabPanel Text="SETTINGS" OnClick="SetSettingTabHeight">
            <PartialSettingsComponent />
        </MudTabPanel>
    </MudTabs>

</MudPaper>


@code {
    protected int activeIndex = 0;
    protected string OtherTab { get; set; } = "display:block"; // height:770px;padding:10px 0px 0px 0px;display:block";
    protected string SettingTab { get; set; } = "display:none";// "height:770px;padding:10px 0px 0px 0px;display:none";
    protected void SetOtherTabHeight()
    {
        //OtherTab = "height:770px;padding:10px 0px 0px 0px;display:block";
        //SettingTab = "height:770px;padding:10px 0px 0px 0px;display:none";
        OtherTab = "display:block";
        SettingTab = "display:none";
        //JS.InvokeVoidAsync("adjustScroll");
        StateHasChanged();
    }
    protected void SetSettingTabHeight()
    {
        // OtherTab = "height:770px;padding:10px 0px 0px 0px;display:none";
        // SettingTab = "height:770px;padding:10px 0px 0px 0px;display:block";
        OtherTab = "display:none";
        SettingTab = "display:block";

        //JS.InvokeVoidAsync("adjustScroll");
        StateHasChanged();
    }

    #region JAVA SCRIPT Library
    private IJSObjectReference? module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                string authTokenStr = await JS.InvokeAsync<string>("connectToAiApp.getCookieValue", "AuthToken");
                if (!string.IsNullOrWhiteSpace(authTokenStr))
                {
                    UserDetail = JsonConvert.DeserializeObject<UserDetail>(authTokenStr);
                }
                module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/textToSpeech.js");
                //module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/chat.js"); // this is a sample code not in use
                await JS.InvokeVoidAsync("loadChat.dataFromLocalstorage");
            }
            catch (Exception ex)
            {

                throw;
            }

        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
    #endregion
}

<script>
    function dataFromLocalstorage(userId) {
        // Load saved chats and theme from local storage and apply/add on the page



        var allChatContainer = document.getElementById("all-chat-container");
        //allChatContainer.innerHTML = localStorage.getItem("all-chats") || defaultText;
        var mainChatContainer = document.getElementById("main-chat-container");
        if (mainChatContainer != null)
            mainChatContainer.innerHTML = localStorage.getItem("all-chats" + userId);


        var libraryUrl = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
        reloadLibrary(libraryUrl);

        let paragraphs = document.querySelectorAll('p');
        paragraphs.forEach(function (paragraph) {
            if (paragraph.innerHTML.trim() === "") {
                paragraph.remove();
            }
        });
        //adjustScroll();
        $(document).ready(function () {
            setTimeout(function () {
                document.getElementById('main-chat-container').scrollTop = document.getElementById('main-chat-container').scrollHeight;
                console.log(document.getElementById('main-chat-container').scrollTop);
            }, 500);
        });
    }
</script>