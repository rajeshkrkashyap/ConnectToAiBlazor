@using Newtonsoft.Json;
@using Services;
@inherits PromptBaseComponent

<MudStack Row="true">
    <MudToggleIconButton @bind-Toggled="@MicOn" Variant="Variant.Outlined"
                         Icon="@Icons.Material.Filled.MicOff" Color="@Color.Default" Title="Off"
                         ToggledIcon="@Icons.Material.Filled.Mic" ToggledColor="@Color.Error" ToggledTitle="On" Style="width:60px" />

    <MudTextField @bind-Value="UserInputText" Lines="2" id="chat-input"  Variant="Variant.Text"></MudTextField>
    <MudButton id="btnSentAudio" Disabled="_IsDisabled" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Default" Size="Size.Small" OnClick="SendPrompt"> Send</MudButton>
</MudStack>
@code {

    public string? UserInputText { get; set; }
    private IJSObjectReference? module;
    bool _MicOn = false;
    bool _IsDisabled = false;
    public bool MicOn
    {
        get { return _MicOn; }
        set
        {
            _MicOn = value;
            StartRecording(_MicOn);
            if (_MicOn)
            {
                _IsDisabled = true;
            }
            else
            {
                _IsDisabled = false;
            }
        }
    }

    private async Task SendPrompt()
    {
        UserInputText = await JS.InvokeAsync<string>("getRecordedText");
        if (string.IsNullOrEmpty(UserInputText))
        {
            return;
        }
        var userPrompt = UserInputText;
        UserInputText = ""; //this require to make clear text box

        string messageId = Guid.NewGuid().ToString();

        await JS.InvokeVoidAsync("UserQueryContent", userPrompt, messageId);

        string authTokenStr = await JS.InvokeAsync<string>("connectToAiApp.getCookieValue", "AuthToken");
        if (!string.IsNullOrWhiteSpace(authTokenStr))
        {
            UserDetail = JsonConvert.DeserializeObject<UserDetail>(authTokenStr);
        }

        ClientPromptInput.InputType = "text";
        ClientPromptInput.Prompt = userPrompt;
        ClientPromptInput.UserId = UserDetail.UserID;
        AppUserSettingService appUserSettingService = new AppUserSettingService(appSettings);
        var appUserSetting = await appUserSettingService.GetAppSettingByAppUserIdAsync(UserDetail.UserID);
        var responseContent = await UpdateUiWithOutStream(await ProcessPrompt(appSettings, ClientPromptInput), userPrompt);
        await JS.InvokeVoidAsync("AppendResponseContent", responseContent, messageId, false);

        var userSetting = JsonConvert.DeserializeObject<UserSetting>(appUserSetting.AllSettingsInJSON);

        if (userSetting != null && Convert.ToBoolean(userSetting.IsSpeakerEnabled))
        {
            await JS.InvokeVoidAsync("aiSpeech.getSpeechFromAzure", responseContent, messageId);
        }
    }
    private async Task StartRecording(bool value)
    {
        await JS.InvokeVoidAsync("recording", value);
    }
}

