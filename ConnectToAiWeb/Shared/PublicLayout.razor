@inherits LayoutComponentBase
@inject IJSRuntime JS
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudImage Src="/images/ConnecttoAi.svg" Width="250"></MudImage>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleTheme())" Style="@darkMode" />
        <MudIconButton Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => ToggleTheme())" Style="@lightMode" />
        <MudIconButton Href="/signup" Icon="@Icons.Material.Outlined.AppRegistration" Color="Color.Inherit" Title="Sign Up"></MudIconButton>
        <MudIconButton Href="/Login" Icon="@Icons.Material.Outlined.Login" Color="Color.Inherit" Title="Login" />
    </MudAppBar>

    <MudMainContent Style="margin:15px 15px 15px 15px">
        @Body
    </MudMainContent>
</MudLayout>
@code {

    [CascadingParameter]
    public bool Rtl { get; set; }
    bool openEnd = false;
    string firstPage = "display:none";
    string lastPage = "display:block";
    void ToggleEndDrawer()
    {
        openEnd = !openEnd;
        if (openEnd)
        {
            firstPage = "display:none";
            lastPage = "display:block";
        }
        else
        {
            lastPage = "display:none";
            firstPage = "display:block";
        }
    }

    string darkMode = "display:block";
    string lightMode = "display:none";
    string logo = "/images/ColorLogo.png";

    void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        if (_isDarkMode)
        {
            logo = "/images/ColorLogo.png";
            lightMode = "display:none";
            darkMode = "display:block";
            ToggleStylesheetAsync("dark");
        }
        else
        {
            logo = "/images/ColorLogo.png";
            darkMode = "display:none";
            lightMode = "display:block";
            ToggleStylesheetAsync("light");
        }

    }

    private async Task ToggleStylesheetAsync(string styleSheetName)
    {
        await JS.InvokeVoidAsync("toggleStylesheet", styleSheetName);
    }

    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = true;// await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}