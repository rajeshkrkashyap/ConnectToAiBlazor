@inherits PromptBaseComponent
@using Newtonsoft.Json;
@using System.Text;
@inject IJSRuntime JS
@implements IAsyncDisposable

<MudPaper>
    <MudPaper id="chatContainer" Style="@OtherTab">
        <PartialChatPageComponent />
    </MudPaper>
    <MudPaper id="settingContainer" Style="@SettingTab">
        <PartialSettingPageComponent />
    </MudPaper>
    <MudTabs Outlined="true" Position="Position.Bottom" Rounded="true" Border="true"
             ApplyEffectsToContainer="true" PanelClass="pa-4" Color="Color.Default" @bind-ActivePanelIndex="activeIndex" id="footer">
        <MudTabPanel Text="IMAGE" OnClick="SetOtherTabHeight">
            <PartialImageComponent />
        </MudTabPanel>
        <MudTabPanel Text="AUDIO" OnClick="SetOtherTabHeight">
            <PartialAudioComponent />
        </MudTabPanel>
        <MudTabPanel Text="TEXT" OnClick="SetOtherTabHeight">
            <PartialTextComponent />
        </MudTabPanel>
        <MudTabPanel Text="SETTINGS" OnClick="SetSettingTabHeight">
            <PartialSettingsComponent />
        </MudTabPanel>
    </MudTabs>

</MudPaper>


@code {
    protected int activeIndex = 0;
    protected string OtherTab { get; set; } = "display:block"; // height:770px;padding:10px 0px 0px 0px;display:block";
    protected string SettingTab { get; set; } = "display:none";// "height:770px;padding:10px 0px 0px 0px;display:none";
    protected void SetOtherTabHeight()
    {
        //OtherTab = "height:770px;padding:10px 0px 0px 0px;display:block";
        //SettingTab = "height:770px;padding:10px 0px 0px 0px;display:none";
        OtherTab = "display:block";
        SettingTab = "display:none";
        //JS.InvokeVoidAsync("adjustScroll");

        StateHasChanged();
    }
    protected void SetSettingTabHeight()
    {
        // OtherTab = "height:770px;padding:10px 0px 0px 0px;display:none";
        // SettingTab = "height:770px;padding:10px 0px 0px 0px;display:block";
        OtherTab = "display:none";
        SettingTab = "display:block";

        //JS.InvokeVoidAsync("adjustScroll");
        StateHasChanged();
    }

    #region JAVA SCRIPT Library
    private IJSObjectReference? module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string authTokenStr = await JS.InvokeAsync<string>("connectToAiApp.getCookieValue", "AuthToken");
            if (!string.IsNullOrWhiteSpace(authTokenStr))
            {
                UserDetail = JsonConvert.DeserializeObject<UserDetail>(authTokenStr);
            }
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/textToSpeech.js");
            //module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/chat.js"); // this is a sample code not in use
            await JS.InvokeVoidAsync("loadChat.dataFromLocalstorage", UserDetail.UserID);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
    #endregion
}

