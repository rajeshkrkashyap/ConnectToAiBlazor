@using DataModel.Models
@using Newtonsoft.Json;
@using Services;
@inherits PromptBaseComponent
@inject AppSettings appSettings
@implements IAsyncDisposable
<MudStack Row="true">
    <MudIconButton Icon="@Icons.Material.Filled.TextFields" Variant="Variant.Outlined" Color="Color.Default" Style="width:60px" />
    <MudTextField id="chat-input" Lines="2" @bind-Value="UserInputText" Label="Write you query here!" />
    <MudButton id="btnSentText" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Default" Size="Size.Small" OnClick="SendPrompt" title="text">Send</MudButton>
</MudStack>
@code {
    public string? UserInputText { get; set; }
    private IJSObjectReference? module;
    private async Task SendPrompt()
    {
        if (string.IsNullOrEmpty(UserInputText))
        {
            return;
        }
        var userPrompt = UserInputText;
        UserInputText = ""; //this require to make clear text box

        string messageId = Guid.NewGuid().ToString();

        await JS.InvokeVoidAsync("UserQueryContent", userPrompt, messageId);

        string authTokenStr = await JS.InvokeAsync<string>("connectToAiApp.getCookieValue", "AuthToken");
        if (!string.IsNullOrWhiteSpace(authTokenStr))
        {
            UserDetail = JsonConvert.DeserializeObject<UserDetail>(authTokenStr);
        }

        ClientPromptInput.InputType = "text";
        ClientPromptInput.Prompt = userPrompt;
        ClientPromptInput.UserId = UserDetail.UserID;
        AppUserSettingService appUserSettingService = new AppUserSettingService(appSettings);
        var appUserSetting = await appUserSettingService.GetAppSettingByAppUserIdAsync(UserDetail.UserID);

        var responseContent = await UpdateUiWithOutStream(await ProcessPrompt(appSettings, ClientPromptInput), userPrompt);
        await JS.InvokeVoidAsync("AppendResponseContent", UserDetail.UserID, responseContent, messageId, false);
        
        var userSetting = JsonConvert.DeserializeObject<UserSetting>(appUserSetting.AllSettingsInJSON);

        if (userSetting!=null && Convert.ToBoolean(userSetting.IsSpeakerEnabled))
        {
            await JS.InvokeVoidAsync("aiSpeech.getSpeechFromAzure", responseContent);
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/textToSpeech.js");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}